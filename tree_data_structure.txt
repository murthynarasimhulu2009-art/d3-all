DATA
│
└── root: [                                   <-- array containing a single root node object
      ┌───────────────────────────────────────────────────────────────────────┐
      │ {                                                                     │
      │   name: string,               // identifier of the node (e.g., "root", │
      │                               // "Branch A", "Leaf 1") – categorical   │
      │   children: [               // nested array of child node objects,   │
      │     {                       // each child follows the same schema │
      │       name: string,         // node identifier (nominal)            │
      │       children: [ … ]       // optional further children        │
      │     },                      // (recursively nested)            │
      │     { … }                    // …                                 │
      │   ]                         // end of children array                │
      │ }                                                                     │
      └───────────────────────────────────────────────────────────────────────┘
]

Explanation of fields after transformation (hierarchy → tree)  

- name – *nominal* (categorical) identifier for each node; used for labeling and as the key for the color scale (depth).  
- x – *quantitative* coordinate generated by the `tree` transform (vertical position).  
- y – *quantitative* coordinate generated by the `tree` transform (horizontal position).  
- depth – *quantitative* integer representing the node’s depth in the hierarchy (root = 0, children = 1, …); used to map color via the ordinal `color` scale.  

Derived link fields (used in the “links” layer)  

- source.x, source.y – coordinates of the link’s source node (derived from `x` and `y`).  
- target.x, target.y – coordinates of the link’s target node.  

The raw data is a single hierarchical object (root) with nested `children` arrays; after the hierarchy and tree transforms it becomes a flat list of nodes (with fields `name`, `x`, `y`, `depth`) and a derived list of links (with source/target coordinate fields). No separate top‑level array of links is required in the source – they are computed from the hierarchical structure.