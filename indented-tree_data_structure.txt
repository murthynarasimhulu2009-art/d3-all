DATA
│
└── root: {                                 ← root object of the hierarchy
    ├─ name: string,                        ← identifier / label for each node (e.g., "root", "Category A", "Item 1")
    ├─ children: [                        ← array of child nodes (nested hierarchy)
    │   ┌───────────────────────────────────────────────────────┐
    │   │ {                                                     │
    │   │   name: string,                                      │   ← same identifier field for the child
    │   │   children: [ … ]   // optional, present if the node has
    │   │       └─ further nested objects (same structure) │   │   sub‑categories or items
    │   │   value: number   // optional, present only on leaf
    │   │       // quantitative value for leaf nodes (e.g., 234)
    │   │ }                                                     │
    │   └───────────────────────────────────────────────────────┘
    │   // repeated for each child (Category A, Category B, …)
    │ ]
    └─ value: number,                       ← quantitative value for leaf nodes only
}
│
└── (After hierarchy transform, each node will also have)
    ├─ depth: number,                      ← quantitative level in the hierarchy (0 for root, 1 for categories, 2 for items)
    ├─ index: number,                     ← vertical order index used for y‑positioning
    └─ (other derived fields such as “parent”, “children” remain) 

Explanation of fields:
- name – categorical identifier for every node.
- children – nested array of child nodes, enabling the hierarchical (tree) structure.
- value – quantitative metric attached to leaf nodes (items).
- depth – quantitative depth level generated by the hierarchy transform (used for x‑position).
- index – quantitative position index generated by the transform (used for y‑position).