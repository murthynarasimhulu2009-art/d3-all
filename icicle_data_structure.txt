DATA  
│  
└── root: [                               ← top‑level array (the root node)  
      ┌───────────────────────────────────────────────────────────────┐  
      │ {                                                             │  
      │   name: string – the label of the node (e.g., “Category A”,   │  
      │         “Item 1”). Used as a categorical identifier.   │  
      │   value: number – numeric value for leaf nodes only.       │  
      │   children: array – list of child nodes (same structure).│  
      │   // for leaf nodes “children” is omitted.                │  
      │ }                                                             │  
      │   └─ children (if present): [                               │  
      │        ┌───────────────────────────────────────────────┐  
      │        │ {                                             }│  
      │        │   name: string – name of the child node.   │  
      │        │   value: number – numeric metric for leaf nodes.│  
      │        │   children: omitted (leaf).                │  
      │        └───────────────────────────────────────────────┘  
      └───────────────────────────────────────────────────────┘  

Explanation of fields  

- name – *nominal* (categorical) identifier for each node in the hierarchy.  
- value – *quantitative* metric; present only on leaf nodes (Item 1‑6).  
- children – *array* of child node objects; creates the nested hierarchy (categories → items).  

Derived fields (added by transforms, not part of the raw source)  

- depth – numeric depth of the node in the hierarchy (root = 0).  
- x0, y0, x1, y1 – numeric coordinates generated by the `partition` transform; used for positioning rectangles in the icicle chart.  

The raw data consists of a single root object with a `children` array that contains two category objects, each of which contains its own `children` array of leaf items with `value` fields. No separate “nodes” or “links” arrays are required; the hierarchy is expressed entirely through nested `children` arrays.