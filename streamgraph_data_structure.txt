DATA
│
└── main: [               <-- array of data objects (the original data source)
      ┌───────────────────────────────────────────────────────────────────────┐
      │ {                                                                     }│
      │ date: string (ISO‑8601 timestamp) – temporal identifier used   │
      │       for the horizontal (time) axis.                                 │
      │ music: number – quantitative value for the “music” category.          │
      │ movies: number – quantitative value for the “movies” category.       │
      │ books: number – quantitative value for the “books” category.        │
      │ games: number – quantitative value for the “games” category.       │
      │   (each numeric field represents the amount of the respective       │
      │    category on the given date)                                    │
      └───────────────────────────────────────────────────────────────────────┘
]

After the stack transform (type: “stack”, offset: “wiggle”) the library expands each original record into one row per category, producing a flattened dataset that the area mark consumes. The resulting rows contain:

- date – same temporal field as above (used for the x‑scale).  
- y0 – numeric start position of the stacked area (generated by the stack transform).  
- y1 – numeric end position of the stacked area (generated by the stack transform).  
- category – nominal identifier of the series (one of “music”, “movies”, “books”, “games”).  
- value – the original quantitative value for that category (the original “music”, “movies”, etc. value).  

Thus the final data shape expected by the streams layer is a flat array where each element has the fields:

```
{
  date: <temporal>,   // e.g., "2020-01-03T18:30:00.000Z"
  y0:   <number>,   // lower bound of the stacked area
  y1:   <number>,   // upper bound of the stacked area
  category: <string>, // "music", "movies", "books", or "games"
  value: <number>   // original quantitative value for the category
}
```

No nested arrays (such as nodes‑links) are present; the data is a simple flat array of objects.